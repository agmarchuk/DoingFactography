@page "/"
@using MatBlazor; 

<h1>Basic CRUD using MAtBlazor Library</h1>
<MatButton Outlined="true" @onclick="@(e=>OpenDialog(false))"> Add Person </MatButton>

<hr/>

<MatTable Items="@persons" class=" =mat-elevation-z5"
    AllowSelection = "true"
    SelectionChanged = "SelectionChangedEvent"
    FilterByColumnName="Name">

    <MatTableHeader>
        <th>Id</th>
        <th>Name</th>
        <th>Age</th>
    </MatTableHeader>   
    <MatTableRow>
        <td>@context.PersonId</td>
        <td>@context.Name</td>
        <td>@context.Age</td>
        <td>
            <MatButton Raised="true" @onclick="@(e=>OpenDialog(true))" Icon="edit" title="Edit Person"></MatButton>
            <MatButton Raised="true" @onclick="@(e=>DeletePerson1(@context.PersonId))" Icon="restore_from_trash" title="Delete Person"></MatButton>
        </td>
    </MatTableRow>
</MatTable>

<MatButton OnClick="CreateNew">
    Создать
</MatButton>


<MatDialog @bind-IsOpen="@dialogIsOpen">
    <MatDialogTitle>Add/Edit Person</MatDialogTitle>
    <MatDialogContent>
        @*<MatTextField Label="Person Id" @bind-Value="@person.PersonId"></MatTextField>*@
        <MatTextField Label="Person Name" @bind-Value="@person.Name"></MatTextField>
        <MatTextField Label="Person Age" @bind-Value="@person.Age"></MatTextField>

    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="OkClick">Add</MatButton>
        <MatButton OnClick="CloseDialog">Close</MatButton>>
    </MatDialogActions>
</MatDialog>

<MatSnackbar @bind-IsOpen="snackBar" Leading="true">
    <MatSnackbarContent>Person Deleted</MatSnackbarContent>
    <MatSnackbarActions>
        <MatButton Raised="true" @onclick="UndoDelete">Undo</MatButton>
    </MatSnackbarActions>
</MatSnackbar>

<MatTextField Label="look" @bind-Value="@look"></MatTextField>

@code{
    Person person = new Person();
    Person selectedPers = null;
    Person tempPers = null;
    int _index = -1;
    bool _isDelete = false;
    bool dialogIsOpen = false;
    bool _isEdit = false;
    bool snackBar = false;

    List<Person> persons = new List<Person>()
    {
        new Person(1,"Nikolai",20),
        new Person(2,"Andrey",15),
        new Person(3,"Dmitriy",83)
    };

    int last_ind = 3;

    public class Person
    {
        public int PersonId { get; set; }
        public string Name { get; set; }
        public int Age { get; set; }

        #region Constructors
        public Person() { }
        public Person(int personId,
                        string name,
                        int age)
        {
            PersonId = personId;
            Name = name;
            Age = age;
        }
        #endregion
    }

    #region Methods
    private void AddPerson(Person pers)
    {
        pers.PersonId = last_ind+1;
        persons.Add(pers);
        last_ind++;
    }

    private void CreateNew() //Аналог AddPerson
    {
        Person pers = new Person() { PersonId = last_ind + 1 ,
            Name="Dmitriy",
            Age=20};
        persons.Add(pers);
        last_ind++;
    }


    private void EditPerson(Person pers)
    {
        if (pers!=null && pers.PersonId > 0)
        {
            int index = persons.FindIndex(a => a.PersonId == pers.PersonId);
            persons.RemoveAll(a => a.PersonId == pers.PersonId);
            persons.Insert(index, pers);
        }
    }
    private string look;

    private void DeletePerson1(int pid)
    {
        look = pid.ToString();
        int index = persons.FindIndex(a => a.PersonId == pid);
        persons.RemoveAt(index);
    }

    private void DeletePerson()
    {

        _isDelete = true;
        if (person!=null && person.PersonId > 0)
        {
            #region For MarSnackBar
            _index = persons.FindIndex(a => a.PersonId == person.PersonId);
            tempPers = new Person(person.PersonId,
                                  person.Name,
                                  person.Age);
            snackBar = true;
            #endregion
            persons.Remove(person);
            _isDelete = false;
            this.StateHasChanged();
        }


    }

    private void UndoDelete()
    {
        if(tempPers!=null && _index > 0)
        {
            persons.Insert(_index, tempPers);
            tempPers = null;
            _index = -1;
        }
    }

    #endregion

    #region Dialog Box Methods
    private void OpenDialog(bool isEdit)
    {
        _isEdit = isEdit;
        if (!_isEdit)
        {
            person = new Person();
        }
        dialogIsOpen = true;

    }

    private void CloseDialog()
    {
        dialogIsOpen = false;
        if (selectedPers != null)
        {
            person = selectedPers;
            this.EditPerson(selectedPers);
        }
    }
    private void OkClick() /// Save Person info
    {
        dialogIsOpen = true;
        if (!_isEdit)
        {
            this.AddPerson(person);

        }
        else
        {
            person.PersonId = selectedPers.PersonId;
            this.EditPerson(person);
        }
        
    }

    private void SelectionChangedEvent(object pers)
    {
        var currentPers = (Person)pers;
        if (currentPers != null)
        {
            selectedPers = new Person(currentPers.PersonId,
                                currentPers.Name,
                                currentPers.Age);
        }
        else
        {
            selectedPers = new Person();
        }
        if (_isDelete)
        {
            this.DeletePerson();
        }


    }
    #endregion
}

