@page "/gene/{entityId?}"
@using RDFEngine;
@using MagBlazor.Models
@inject NavigationManager NavManager

<h3>Родословная</h3>
<div>
    <input @bind="searchsample" style="height:24px; margin-top:0px;margin-bottom:10px;" />
    <span>расш.<input type="checkbox" @bind="extended" /></span>
</div>
@if (!string.IsNullOrEmpty(searchsample))
{
    IEnumerable<RRecord> query = null;
    if (!extended)
    {
        query = (new RDFEngine.RXEngine()).RSearch(searchsample);
    }
    else
    {
        query = (new RDFEngine.RXEngine()).RSearchByWords(searchsample);
    }


    query = query.Where(r => r.Tp == "http://fogid.net/o/person");
    // Убрать дубли
    query = query.Distinct(new RRecordComparer());
    if (!extended) { query = query.OrderBy(r => Infobase.GetName(r)); }
    foreach (RRecord rec in query)
    {
        <div>
            <a href="javascript:void(0)" @onclick="@(e =>SearchResultClick(rec))">@Infobase.GetName(rec)</a>
        </div>
    }
}
@if (recordlevels != null)
{
    foreach (var rl in recordlevels)
    {
        int otstup = 100 * rl.level;
        <div style="margin-left:@(otstup)px;">
            <MagBlazor.Components.ViewMidiPortrait record="@focusrecord" />
        </div>
    }
}

@code {
        [Parameter]
        public string entityId { get; set; }


    private string searchsample;
    private bool extended = false;
    private RRecord focusrecord;
    private RRecordLevel[] recordlevels = null;


    private GeneTreeModel BuildMidiPortrait(string id, GeneTreeModel parent_node)
    {
        RRecord record = (new RDFEngine.RXEngine()).GetRRecord(id, true);
        if (record.Tp != "http://fogid.net/o/person") throw new Exception("Err: 2229");
        RRecord spouse = null;
        foreach (RProperty p in record.Props)
        {
            if (p is RInverseLink)
            {
                RInverseLink ril = (RInverseLink)p;
                if (ril.Prop == "http://fogid.net/o/husband")
                {
                    RRecord family = (new RDFEngine.RXEngine()).GetRRecord(ril.Source);
                    spouse = (new RDFEngine.RXEngine()).GetRRecord(family.GetDirectResource("http://fogid.net/o/wife"));
                }
                if (ril.Prop == "http://fogid.net/o/wife")
                {
                    RRecord family = (new RDFEngine.RXEngine()).GetRRecord(ril.Source);
                    spouse = (new RDFEngine.RXEngine()).GetRRecord(family.GetDirectResource("http://fogid.net/o/husband"));
                }

            }
        }
        GeneTreeModel model = new GeneTreeModel() { node = record, parent = parent_node, spouse = spouse };
        var childs = record.Props
                .Where(p => p is RInverseLink && (p.Prop == "http://fogid.net/o/father" || p.Prop == "http://fogid.net/o/mother"))
                .Cast<RInverseLink>()
                .Select(ril => BuildMidiPortrait(ril.Source, model));
        model.childs = childs.ToArray();
        return model;
    }
    private void Build(string id)
    {
        GeneTreeModel gt_model = BuildMidiPortrait(id, null);
        focusrecord = gt_model.node;
        recordlevels = RRecordLevel.Traverse(gt_model);
    }
    private void SearchResultClick(RRecord rec)
    {
        Build(rec.Id);
    }
    protected override void OnParametersSet()
    {
        if (entityId != null)
        {
            Build(entityId);
        }
    }
}
