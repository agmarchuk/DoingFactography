@page "/combine"
@using RDFEngine
@using MagBlazor.Data
@using System.Xml.Linq
@inject IFDataService db

<h3>Combine</h3>
<div>@(nall) records</div>
<div>@(npersons) persons</div>
<div>@(norgsys) org systems</div>
<div>@(ndocuments) documents</div>
<div>@(nphotos) photos</div>
<div>@(nvideo) video</div>

@if (firstvisible < groupsOfSame.Length)
{
    foreach (var r in groupsOfSame[firstvisible])
    {
        <div>
            <button @onclick="() => Choose(r.Id)">выбрать</button>
            @(r.Id) <a href="edit/@(r.Id)" target="_blank"> @(r.GetName())</a> @(r.GetDates())
        </div>
    }
    <MagBlazor.Components.DrawTable records="@(groupsOfSame[firstvisible])" />
}
@foreach (var gr in groupsOfSame.Skip(firstvisible + 1))
{
    <div>=======================</div>

    @foreach (RRecord r in gr)
    {
        <div> @(r.Id) <a href="edit/@(r.Id)" target="_blank"> @(r.GetName())</a> @(r.GetDates()) </div>
    }
    <MagBlazor.Components.DrawTable records="@(gr)" />
}

<button @onclick="Reload">Reload</button>

@code {

    private string typ = "http://fogid.net/o/person";
    private RRecord[] relements;
    private int nall, npersons, norgsys, ndocuments, nphotos, nvideo;
    private RRecord[][] groupsOfSame;
    int firstvisible = 0;

    protected override void OnParametersSet()
    {
        var rels = (new RYEngine(db)).RAll();
        foreach (var el in rels)
        {
            nall += 1;
            if (el.Tp == "http://fogid.net/o/person") { npersons += 1; }
            else if (el.Tp == "http://fogid.net/o/org-sys") { norgsys += 1; }
            else if (el.Tp == "http://fogid.net/o/document") { ndocuments += 1; }
            else if (el.Tp == "http://fogid.net/o/photo-doc") { nphotos += 1; }
            else if (el.Tp == "http://fogid.net/o/video-doc") { nvideo += 1; }

        }
        // Выделение из объектов типа typ пар имя - идентификатор
        groupsOfSame = (new RYEngine(db)).RAll()
        .Where(rel => rel.Tp == typ)
        .Select(rel => new { name = rel.GetName(), r = rel })
        .GroupBy(pair => pair.name)
        .Select(gr =>
        {
            var list = gr.Select(g => g).ToArray();
            return new { key = gr.Key, list = (list.Count() > 1 ? list : null) };
        })
        .Where(kl => kl.list != null)
        .Select(kl => kl.list.Select(nr => nr.r)
            .Select(rr =>
            {
                RRecord r = (new RYEngine(db)).GetRRecord(rr.Id);
                return new RRecord { Id = r.Id, Tp = r.Tp, Props = db.ontology.ReorderFieldsDirects(r, "ru") };
            })
            .ToArray())
        .ToArray()
        //.Where(dupl = )
        ;
    }
    private void Choose(string id)
    {
        foreach (var rr in groupsOfSame[firstvisible].Where(r => r.Id != id))
        {
            (new RYEngine(db)).Substitute(rr.Id, id, "mag111");
            firstvisible += 1;
            StateHasChanged();
        }

    }
    private void Reload()
    {
        //StateHasChanged();
    }
}
