@using RDFEngine
@page "/{entityId?}"

<div>Редактировать: <input type="checkbox" @bind="toedit" /></div>
<MagBlazor.Components.Search onSelected="(rid) => UtilizeRecord((string)rid)" searchsample="@searchsample" typs="@tps" />
@if (focusRec != null)
{
    if (focusRec.Tp == "http://fogid.net/o/photo-doc")
    {
        string sr = "docs/GetImage?u=" + ((RField)focusRec.Props.FirstOrDefault(p => p.Prop == "http://fogid.net/o/uri")).Value + "&s=normal";
        <img src="@sr" />

    }
    <MagBlazor.Components.DrawTable focusId="@focusRec.Id" inverseTp="@focusRec.Tp" records="@(new RRecord[] { focusRec })" onGo="(id) => Build((string)id)" />
    var list2 = Infobase.rontology.AncestorsAndSelf(focusRec.Tp).SelectMany(t => Infobase.rontology.GetInversePropsByType(t));
    foreach (var propName in list2)
    {
        var pr = focusInversePropTypes.FirstOrDefault(ipt => ipt.Prop == propName);
        foreach (var typ in Infobase.rontology.DomainsOfProp(propName))
        {
            var it = pr == null ? null : pr.lists.FirstOrDefault(x => x.Tp == typ);
            if (it == null)
            {
                if (Infobase.toedit)
                {
                    <span>@(Infobase.rontology.InvLabelOfOnto(propName)) &nbsp;</span>
                    <span>
                        <a href="javascript:void(0)" @onclick="@(e => BuildInverseTable(propName, typ))">@(Infobase.rontology.LabelOfOnto(typ))</a> |
                    </span>
                }
            }
            else
            {
                <table border="1">
                    <tr valign="top">
                        <td>@(Infobase.rontology.InvLabelOfOnto(propName))</td>
                        <td>
                            <MagBlazor.Components.DrawTable focusId="@focusRec.Id" inverseProp="@propName" inverseTp="@typ" records="@(it==null?null:it.list)" onGo="(id) => Build((string)id)" />
                        </td>
                    </tr>
                </table>
            }
        }
    }
}

@code{
    [Parameter]
    public string entityId { get; set; }

    // Признак редактирования
    private bool toedit { get { return Infobase.toedit; } set { Infobase.toedit = value; } }

    private string[] tps = //new string[] { "http://fogid.net/o/person", "http://fogid.net/o/org-sys" };
        Infobase.rontology.DescendantsAndSeld("http://fogid.net/o/sys-obj").ToArray();

    private string searchsample = "";
    // Запись фокусного элемента и списки обратных свойств для него
    private RRecord focusRec = null;
    private Models.InversePropType[] focusInversePropTypes = null;

    private void UtilizeRecord(string id)
    {
        Build(id);
        searchsample = null;
    }

    // Построение фокусного элемента по его идентификатору
    private void Build(string recId)
    {
        RRecord erec = Infobase.engine.BuildPortrait(recId); // ((REngine)(Infobase.engine)).BuildPortrait(recId);
        if (erec == null)
        {
            focusRec = null;
            return;
        }
        var query = erec.Props.Where(p => p is RInverse && ((RInverse)p).IRec != null)
    .Cast<RInverse>()
    .GroupBy(d => d.Prop)
    .Select(kd => new Models.InversePropType
    {
        Prop = kd.Key,
        lists =
        kd.GroupBy(d => d.IRec.Tp)
            .Select(dd =>
            {
                var qu = dd.Select(x => x.IRec)
                    .Select(rr => new RRecord { Id = rr.Id, Tp = rr.Tp, Props = Infobase.rontology.ReorderFieldsDirects(rr) })
                    .ToArray();
                return new Models.InverseType
                {
                    Tp = dd.Key,
                    list = qu
                };
            }).ToArray()
    }).ToArray();
        focusInversePropTypes = query;
        focusRec = new RRecord { Id = erec.Id, Tp = erec.Tp, Props = Infobase.rontology.ReorderFieldsDirects(erec) };
        entityId = recId;
    }

    private void BuildInverseTable(string prop, string typ)
    {
        Infobase.engine.NewRelation(typ, prop, focusRec.Id);
        Build(focusRec.Id);
        //look = $"run BuildInverseTable {prop} {typ}";
    }

    // Переменная для отладки-просмотра
    private string look = "";

    protected override void OnInitialized() // = On Page Load
    {
        if (entityId != null)
        {
            Build(entityId);
        }
    }
}

<hr />
<div>@look</div>
