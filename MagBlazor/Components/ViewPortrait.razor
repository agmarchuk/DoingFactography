@using RDFEngine
@using MagBlazor.Models;

@if (m == null) { return; }

<p class="grad">
    <a href="view" class="nov"><img src="images/ico-home.gif" class="ico-home" alt="" />Электронный архив</a>
    &raquo;
    @m.tp
    &raquo;
    @m.name
</p>


<div class="heading1">
    <h1>
        @m.name
    </h1>
</div>

@if (externalId != null)
{
    string pr = "/view/" + m.prev + "/" + externalId;
    string d = "/view/" + externalId;
    string nx = "/view/" + m.next + "/" + externalId;
    <div style="text-align: center;">
        <NavLink href="@d">к документу</NavLink>
        &nbsp;
        @if (m.prev == null)
        {
            <span>пред.</span>
        }
        else
        {
            <NavLink href="@pr"><span>пред.</span></NavLink>
        }
        &nbsp;
        @if (m.next == null)
        {
            <span>след.</span>
        }
        else
        {
            <NavLink href="@nx"><span>след.</span></NavLink>
        }
    </div>
}

@if (!string.IsNullOrEmpty(m.uri) && m.Tp == "http://fogid.net/o/photo-doc")
{
    string sr = "/Docs/GetImage?u=" + m.uri + "&s=medium";
    <div style="text-align: center;">
        <img src="@sr" />
    </div>
}
else if (!string.IsNullOrEmpty(m.uri) && m.Tp == "http://fogid.net/o/video-doc")
{
    string sr = "/Docs/GetVideo?u=" + m.uri;
    <div style="text-align: center;">
        <video src="@sr" />
    </div>
}


<table cellpadding="0" cellspacing="0" border="0" width="100%" class="info-person">
    @{
        string fd = mm.GetField(1);
        string td = mm.GetField(2);
        string description = mm.GetField(3);
    }
    @if (!string.IsNullOrEmpty(fd) || !string.IsNullOrEmpty(td))
    {
        string dates = (fd == null ? "" : fd) + (string.IsNullOrEmpty(td) ? "" : "-" + td);
        <tr valign="top">
            <td width="25%" class="line-name">Дата(ы):</td>
            <td width="75%" class="line-info">
                @(dates)
            </td>
        </tr>
    }
    @if (!string.IsNullOrEmpty(description))
    {
        <tr valign="top">
            <td width="25%" class="line-name">Описание документа:</td>
            <td width="75%" class="line-info">@description</td>
        </tr>
    }
    @{ RRecord[] indoc_parts = mm.GetMultiInverse(10); }
    @if (indoc_parts != null && indoc_parts.Count() > 0)
    {
        <tr>
            <td class="doc-show-small">&nbsp;</td>
            <td class="doc-show-small">
                @foreach (var docpart in indoc_parts)
                {
                    RRecord pitem = docpart.GetDirect("http://fogid.net/o/partItem");
                    string nm = pitem.GetName();
                    string uri = pitem.GetField("http://fogid.net/o/uri");

                    if (uri != null && uri.StartsWith("iiss://"))
                    {
                        string sr = "/Docs/GetImage?u=" + uri + "&s=small";
                        string lnk = "/view/" + pitem.Id + "/" + mm.Id;
                        <div class="show-small">
                            <NavLink href="@lnk">
                                <img src="@sr" border="0" vspace="10" hspace="10" alt="" />
                            </NavLink>
                            <br />
                            @docpart.GetField("http://fogid.net/o/pageNumbers")
                        </div>
                    }
                    else
                    {
                        <div class="show-small">
                            <a href="@uri">
                                <img src="/images/photo.jpg" />
                            </a>
                            <br />
                            @docpart.GetField("http://fogid.net/o/pageNumbers")
                        </div>
                    }
                }
            </td>
        </tr>
    }
    @{ string doccontent = mm.GetField(5); }
    @if (!string.IsNullOrEmpty(doccontent))
    {
        <tr valign="top">
            <td width="25%" class="line-name">Текст документа:</td>
            <td width="75%" class="line-info">@doccontent</td>
        </tr>
    }

    @if (m.indoc_reflections != null && m.indoc_reflections.Count() > 0)
    {
        string sep = "";
        <tr valign="top">
            <td width="25%" class="line-name">Отраженные персонажи:</td>
            <td width="75%" class="line-info">
                @foreach (var refle in m.indoc_reflections.Where(re => re != null))
                {
                    RRecord who = refle.GetDirect("http://fogid.net/o/reflected");
                    string lnk = "/view/" + who.Id;
                    @sep; sep = ", "; <NavLink href='@lnk'>@who.GetName()</NavLink>;
                }
            </td>
        </tr>
    }
    @{
        RRecord[] titles = mm.GetMultiInverse(6);
    }
    @if (titles != null && titles.Count() > 0)
    {
        <tr valign="top">
            <td width="25%" class="line-name">Титул:</td>
            <td width="75%" class="line-info">
                @foreach (RRecord tit in titles)
                {
                    string dts = tit.GetDates();
                    <span>@tit.GetField("http://fogid.net/o/degree")</span>
                    if (!string.IsNullOrEmpty(dts))
                    {
                        <span> (@dts) </span>
                    }
                    <br />
                }
            </td>
        </tr>
    }
    @{
        RRecord[] participant_participation = mm.GetMultiInverse(7);
    }
    @if (participant_participation != null && participant_participation.Count() > 0)
    {
        RRecord[] works = null, notworks = null;
        works = participant_participation.Where(pp => pp.GetDirect(4)?.GetField(3) == "organization").ToArray();
        notworks = participant_participation.Where(pp => pp.GetDirect(4)?.GetField(3) != "organization").ToArray();
        if (works.Count() > 0)
        {
            <tr valign="top">
                <td width="25%" class="line-name">Место работы:</td>
                <td width="75%" class="line-info">
                    @foreach (var work in works.OrderBy(w => w.GetField(1)))
                    {
                        var org = work.GetDirect(4);
                        string nm = org.GetName();
                        string dt = work.GetDates();
                        <a href='/view/@org.Id'>@nm</a>
                        if (!string.IsNullOrEmpty(dt))
                        {
                            <span>(@dt)</span>
                        }
                        <br />
                    }
                </td>
            </tr>
        }
        if (notworks.Count() > 0)
        {
            <tr valign="top">
                <td width="25%" class="line-name">Участие в мероприятиях:</td>
                <td width="75%" class="line-info">
                    @foreach (var nwork in notworks.OrderBy(w => w.GetField(1)))
                    {
                        var org = nwork.GetDirect(4);
                        string nm = org.GetName();
                        string dt = nwork.GetDates();
                        string dto = org.GetDates();
                        <a href='/view/@org.Id'>@nm</a>
                        if (!string.IsNullOrEmpty(dt))
                        {
                            <span>(@dt)</span>
                        }
                        else if (!string.IsNullOrEmpty(dto))
                        {
                            <span>(@dto)</span>
                        }
                        <br />
                    }
                </td>
            </tr>
        }
    }
    @{
        RRecord[] livings = mm.GetMultiInverse(8);
    }
    @if (livings != null && livings.Count() > 0)
    {
        <tr valign="top">
            <td width="25%" class="line-name">Геоинформация:</td>
            <td width="75%" class="line-info">
                @foreach (var live in livings)
                {
                    var place = live.GetDirect(1);
                    <a href='/view/@place.Id'>@place.GetName()</a>
                    <span>&nbsp;</span>
                    <span>@(live.GetField(0))</span>
                }
            </td>
        </tr>
    }
    @{
        RRecord[] inorg_participation = mm.GetMultiInverse(9);
    }
    @if (inorg_participation != null && inorg_participation.Count() > 0)
    {
        <tr valign="top">
            <td width="25%" class="line-name">Участники:</td>
            <td width="75%" class="line-info">
                @foreach (var participation in inorg_participation)
                {
                    var participant = participation.GetDirect(4);
                    <a href='/view/@participant.Id'>@participant.GetName()</a>
                    <span>&nbsp;</span>
                    <span>@(participation.GetField(3))</span>
                    @if (!string.IsNullOrEmpty(participation.GetField(0)) || !string.IsNullOrEmpty(participation.GetField(1)))
                    {
                        string dts = (string.IsNullOrEmpty(participation.GetField(0)) ? "" : participation.GetField(0)) +
                            (string.IsNullOrEmpty(participation.GetField(1)) ? "" : "-" + participation.GetField(1));
                        <span>(@(dts))</span>
                    }
                    <br />
                }
            </td>
        </tr>
    }
    @{
        RRecord[] inDocument_documentPart = mm.GetMultiInverse(10);
    }
    @if (inDocument_documentPart != null && inDocument_documentPart.Count() > 0)
    {
        <tr valign="top">
            <td width="25%" class="line-name">Участники:</td>
            <td width="75%" class="line-info">
                @foreach (var part in inDocument_documentPart)
                {
                    var doc = part.GetDirect(1);
                    <a href='/view/@doc.Id'>@doc.GetName()</a>
                    <span>&nbsp;</span>
                    <span>@(part.GetField(0))</span>
                    <br />
                }
            </td>
        </tr>
    }
    @{
        RRecord[] inDoc_reflection = mm.GetMultiInverse(11);
    }
    @if (inDoc_reflection != null && inDoc_reflection.Count() > 0)
    {
        <tr valign="top">
            <td width="25%" class="line-name">Участники:</td>
            <td width="75%" class="line-info">
                @foreach (var reflect in inDoc_reflection)
                {
                    var doc = reflect.GetDirect(1);
                    <a href='/view/@doc.Id'>@doc.GetName()</a>
                    <span>&nbsp;</span>
                    <span>@(reflect.GetField(0))</span>
                    <br />
                }
            </td>
        </tr>
    }

</table>

<hr />
<div>@look</div>


@code {
    [Parameter]
    public RRecord focusrecord { get; set; }

    [Parameter]
    public string externalId { get; set; }

    private PortraitModel4 m = null;
    private RRecord mm = null;

    protected override void OnInitialized() // = On Page Load
    {
        Build();
    }
    protected override void OnParametersSet() // = On Page Load
    {
        Build();
    }
    private string look;
    private void Build()
    {
        if (focusrecord != null)
        {
            m = new PortraitModel4(focusrecord, externalId);
            mm = PortraitModel5.BuildMultiTree(focusrecord.Id, format);
            look = mm.Id + " " + mm.Tp + " " + mm.Props.Length;
        }

    }
    RRecord format = new RRecord
    {
        Props = new RProperty[]
    {
@*0*@ new RField { Prop = "http://fogid.net/o/name" },
@*1*@ new RField { Prop = "http://fogid.net/o/from-date" },
@*2*@ new RField { Prop = "http://fogid.net/o/to-date" },
@*3*@ new RField { Prop = "http://fogid.net/o/description" },
@*4*@ new RField { Prop = "http://fogid.net/o/uri" },
@*5*@ new RField { Prop = "http://fogid.net/o/doc-content" },
@*6*@ new RInverse { Prop = "http://fogid.net/o/has-title" },
@*7*@ new RInverse { Prop = "http://fogid.net/o/participant", IRec = new RRecord { Props = new RProperty[]
        {
@*0*@new RField { Prop = "http://fogid.net/o/from-date" },
@*1*@new RField { Prop = "http://fogid.net/o/to-date" },
@*2*@new RField { Prop = "http://fogid.net/o/role-classification" },
@*3*@new RField { Prop = "http://fogid.net/o/role" },
@*4*@new RDirect { Prop = "http://fogid.net/o/in-org", DRec = new RRecord { Props = new RProperty[]
                            {
@*0*@ new RField { Prop = "http://fogid.net/o/name" },
@*1*@ new RField { Prop = "http://fogid.net/o/from-date" },
@*2*@ new RField { Prop = "http://fogid.net/o/to-date" },
@*3*@ new RField { Prop = "http://fogid.net/o/org-classification" },
                            } } }
        } } },
@*8*@ new RInverse
            {
                Prop = "http://fogid.net/o/something",
                IRec = new RRecord
                {
                    Props = new RProperty[]
            {
            new RField { Prop = "http://fogid.net/o/location-category" },
            new RDirect { Prop = "http://fogid.net/o/location-place" }
            }
                }
            },
@*9*@ new RInverse
            {
                Prop = "http://fogid.net/o/in-org",
                IRec = new RRecord
                {
                    Props = new RProperty[]
                            {
                            new RField { Prop = "http://fogid.net/o/from-date" },
                            new RField { Prop = "http://fogid.net/o/to-date" },
                            new RField { Prop = "http://fogid.net/o/role-classification" },
                            new RField { Prop = "http://fogid.net/o/role" },
                            new RDirect { Prop = "http://fogid.net/o/participant" }
                            }
                }
            },
@*10*@ new RInverse
            {
                Prop = "http://fogid.net/o/inDocument",
                IRec = new RRecord
                {
                    Props = new RProperty[]
                            {
                            new RField { Prop = "http://fogid.net/o/pageNumbers" },
                            new RDirect { Prop = "http://fogid.net/o/partItem"  }
                            }
                }
            },
@*11*@      new RInverse
            {
                Prop = "http://fogid.net/o/in-doc",
                IRec = new RRecord
                {
                    Props = new RProperty[]
                            {
                            new RField { Prop = "http://fogid.net/o/ground" },
                            new RDirect { Prop = "http://fogid.net/o/reflected" }
                            }
                }
            },

            }
        };

}
