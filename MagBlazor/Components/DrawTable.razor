@using RDFEngine

@if (records == null || records.Length == 0)
{
    
}
else
{
    RRecord defrow = records[0];
    int rowlength = defrow.Props.Length + (Infobase.toedit ? 1 : 0);
    <table border="1">
        <tr>
            <td colspan="@(rowlength)">
                <span style="color:red;">@(Infobase.rontology.LabelOfOnto(inverseTp))</span>
                @if (toedit)
                {
                    <span>&nbsp; <a href="javascript:void(0)" @onclick="@(e =>NewRelItem(inverseProp, inverseTp))">нов.</a> </span>
                }
            </td>
        </tr>
        <tr valign="top" style="background-color:lightgray; font-size:smaller; font-weight: bold;">
            @foreach (var c in defrow.Props.Where(p => p.Prop != inverseProp))
            {
                <td>@(Infobase.rontology.LabelOfOnto(c.Prop))</td>
            }
            @if (toedit)
            {
                <td></td>
            }
        </tr>
        @foreach (var r in records)
        {
            <tr>
                @foreach (var c in r.Props.Where(p => p.Prop != inverseProp))
                {
                    if (c is RField)
                    {
                        <td>@(((RField)c).Value)</td>
                    }
                    else if (c is RDirect)
                    {
                        var rr = ((RDirect)c).DRec;
                        if (rr != null)
                        {
                            <td><a href="javascript:void(0)" @onclick="@(e =>LinkClick(rr.Id))">@(Infobase.GetName(rr))</a></td>
                        }
                        else
                        {
                            <td></td>
                        }
                    }
                    else
                    {
                        <td>???</td>
                    }
                }
                @if (toedit) 
                {
                    <td><a href="javascript:void(0)" @onclick="@(e =>EdiClick(r.Id))">ред.</a> | <a href="javascript:void(0)" @onclick="@(e =>DelClick(r.Id))">x</a></td>
                }
            </tr>
        }
    </table>
}




@code {
    [Parameter]
    public string focusId { get; set; }
    [Parameter]
    public string inverseProp { get; set; }
    [Parameter]
    public string inverseTp { get; set; }

    [Parameter]
    public RRecord[] records { get; set; }

    [Parameter]
    public EventCallback onGo { get; set; }


    public bool toedit { get { return Infobase.toedit; } }

    private async Task LinkClick(string id)
    {
        await onGo.InvokeAsync(id);
    }
    private async Task NewRelItem(string prop, string tp)
    {
        string nid = Infobase.engine.NewRelation(tp, prop, focusId);
        await onGo.InvokeAsync(focusId);
    }
    private async Task EdiClick(string id)
    {
        await onGo.InvokeAsync(focusId);
    }
    private async Task DelClick(string id)
    {
        Infobase.engine.DeleteRecord(id);
        await onGo.InvokeAsync(focusId);
    }
}
