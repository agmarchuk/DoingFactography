@using MagBlazor.Data
@using RDFEngine;
@inject MagBlazor.Data.IFDataService db;

<div style="width:@(width)px; height:@(height)px; border:solid thin; border-color:black;">
    <div style="font-size: small; height: 18px;">@prolog</div>
    <div>
        @{ 
            string rreeff = "look/" + recId + (eid == null ? "" : "/" + eid);
        }
        <a href="@(rreeff)" style="speak:normal;">@name</a>
        <span style="font-size: small;">@dt</span>
    </div>
    @if (uri != null && documenttype != null && documenttype.StartsWith("image/"))
    {
        string src = "docs/GetImage?s=small&u=" + uri;
        <img src="@src" style=" text-align:center;" />
    }
    else if (uri != null && documenttype != null && documenttype.StartsWith("video/"))
    {
        <img src="/images/video_m.jpg" style=" " />
    }
    else if (uri != null && documenttype != null && documenttype.StartsWith("audio/"))
    {
        <img src="/images/audio_m.jpg" style=" " />
    }
    else if (uri != null && documenttype != null && documenttype == "application/pdf")
    {
        <img src="/images/pdf_m.jpg" style=" " />
    }
</div>

@code {
    [Parameter]
    public string recId { get; set; }
    [Parameter] // Если задано, то из какой записи этот бокс получился
    public string eid { get; set; }
    [Parameter]
    public string prolog { get; set; }
    [Parameter]
    public string width { get; set; }
    [Parameter]
    public string height { get; set; }

    private TRecord trec;

    private string tp;
    private string dt;
    private string name;
    private string uri;
    private string documenttype;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        trec = new TRecord(recId, db);
        tp = trec.Tp;
        dt = trec.GetDates();
        name = trec.GetName()?.Text;

        if (tp == "http://fogid.net/o/person")
        {
            TRecord reflectedfoto = trec.GetMultiInverse("http://fogid.net/o/reflected")
            .Where(r => r.GetText("http://fogid.net/o/ground")?.Text == "official")
            .Where(r =>
            {
                var doc = r.GetDirect("http://fogid.net/o/in-doc");
                if (doc.Tp == "http://fogid.net/o/photo-doc") return true;
                return false;
            })
            .FirstOrDefault();
            uri = reflectedfoto
                ?.GetDirect("http://fogid.net/o/in-doc")
                ?.GetText("http://fogid.net/o/uri")?.Text;
            if (uri != null)
            {
                if (reflectedfoto?.GetDirect("http://fogid.net/o/in-doc").Tp ==
                    "http://fogid.net/o/photo-doc") documenttype = "image/jpeg";
            }
        }
        else
        {
            uri = trec.GetText("http://fogid.net/o/uri")?.Text;
            if (uri != null)
            {
                documenttype = trec.GetText("http://fogid.net/o/docmetainfo")?.Text
                   .Split(';')
                   .Select<string, Tuple<string, string>>(part =>
                   {
                       int pos = part.IndexOf(':');
                       if (pos == -1) return null;
                       return new Tuple<string, string>(part.Substring(0, pos).Trim(), part.Substring(pos + 1).Trim());
                   })
                   .FirstOrDefault(t => t != null && t.Item1 == "documenttype")?.Item2;
            }
        }
    }
}
