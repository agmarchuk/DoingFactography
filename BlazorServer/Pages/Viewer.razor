@page "/viewer"
@using RDFEngine
@using BlazorServer.Components

<h3>Index</h3>

<Search onSearchResultClick="@(arg => BuildPortrait(((RRecord)arg).Id))" hideResults="true"></Search>
@if (model != null)
{
    var m = model;
    <table border="1">
        <tr>
            <td colspan="@(m.row.Length+1)">@m.Tp @m.Id</td>
        </tr>
        <tr>
                @foreach (var c in m.row)
                {
                    <td>@c.Prop</td>
                }

            <td></td>
            </tr>
        <tr>
            @if (editFields)
            {
                <Editor r="@originalRecord" defrow="@originalRecord" forbidden="@forbidden"
                        onSave="@((arg) => { Save((RRecord)arg, true); })"
                        onCancel="@Cancel" onBuildPortrait="@(arg => BuildPortrait((string)arg))"></Editor>
            }
            else
            {
                <PropertyViewer properties="m.row" onBuildPortrait="@(arg => BuildPortrait((string)arg))"></PropertyViewer>
                <td><a href="javascript:void(0)" @onclick="@EditFields">ред</a></td>
            }
            </tr>
    </table>
    @foreach (var p in m.inv)
    {
        foreach (var t in p.lists)
        {
            if (t.list.Any())
            {
                RRecord defrow = t.list[0];
            <table border="1">
                <tr>
                    <td colspan="@(defrow.Props.Length - 1)">
                        <span>@(p.Prop)</span>
                        <span>@(defrow.Tp)</span>
                    </td>
                    <td colspan="2"><a href="javascript:void(0)" @onclick="e => Add(defrow, p.Prop)">доб</a></td>
                </tr>
                <tr>
                    @foreach (var c in defrow.Props)
                    {
                        if (c.Prop == p.Prop) { continue; }
                        <td>@(c.Prop)</td>
                    }
                </tr>
                @if (addRecord)
                {
                <tr>
                    <td colspan="@(defrow.Props.Length + 1)">
                        <Editor r="@defrow" defrow="@defrow" forbidden="@forbidden" 
                                onSave="@((arg) => { Save((RRecord)arg, true);  t.list = t.list.Append((RRecord)arg).ToArray(); })"
                                onCancel="@Cancel" onBuildPortrait="@(arg => BuildPortrait((string)arg))" addRecord="@addRecord"></Editor>
                    </td>
                </tr>
                }
                @foreach (var r in t.list)
                {
                    if (r.Id == eid && eid != null)
                    {
                        <tr>
                            <td colspan="@(r.Props.Length + 2)">
                                <Editor r="@r" defrow="@defrow" forbidden="@forbidden"
                                        onSave="@((arg) => Save((RRecord)arg, false))"
                                        onCancel="@Cancel" onBuildPortrait="@(arg => BuildPortrait((string)arg))"></Editor>
                            </td>
                        </tr>
                    }
                    else
                    {
                        <tr>
                            <PropertyViewer onBuildPortrait="@(arg => BuildPortrait((string)arg))" properties="@r.Props" forbidden="@p.Prop"></PropertyViewer>
                            <td><a href="javascript:void(0)" @onclick="@(e => Edit(r.Id, p.Prop))">ред</a></td>
                            <td><a href="javascript:void(0)" @onclick="@(e => { Delete(r, p.Prop); t.list = t.list.Where(x => x.Id != r.Id).ToArray(); })">уд</a></td>
                        </tr>

                    }
                }

            </table>
                }
            }
        }

    }


@code {
    private string searchsample = "";
    Models.P3Model model = null;
    private RRecord originalRecord;
    private void BuildPortrait(string id)
    {
        searchsample = null;
        eid = null;
        RRecord rec = ((REngine)(Infobase.engine)).BuildPortrait(id);
        originalRecord = rec;
        model = (new Models.P3Model()).Build(rec);
    }
}


@code{

    private string eid;

    private string forbidden;

    private bool editFields = false;

    private bool addRecord = false;

    private void Add(RRecord record, string forbidden)
    {
        addRecord = true;
        eid = null;
        editFields = false;
        this.forbidden = forbidden;
    }

    private void Cancel()
    {
        eid = null;
        addRecord = false;
        editFields = false;
        model = (new Models.P3Model()).Build(originalRecord);
    }

    private void Edit(string eid, string forbidden)
    {
        addRecord = false;
        this.eid = eid;
        this.forbidden = forbidden;

    }

    private void Delete(RRecord record, string link)
    {
        ((REngine)(Infobase.engine)).UpdateRRecord(record, link, model.Id, true);
    }

    private void Save(RRecord record, bool isInverse)
    {
        this.eid = null;
        if (editFields == true)
        {
            model = (new Models.P3Model()).Build(originalRecord);
            editFields = false;
        }

        if (!isInverse)
        {
            //originalRecord = record;
        }

        addRecord = false;
        ((REngine)(Infobase.engine)).UpdateRRecord(record, forbidden, model.Id);
        forbidden = null;

        //model = (new Models.P3Model()).Build(originalRecord);
    }

    private void EditFields()
    {
        editFields = true;
        forbidden = null;
        this.eid = null;
    }
}
