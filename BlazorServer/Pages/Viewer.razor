@page "/viewer/{entityId?}"
@using RDFEngine
@using BlazorServer.Components


@*<div><input type="checkbox" @bind="lookDb" /></div>*@
<h3>Viewer</h3>


<Search onSearchResultClick="@(arg => BuildPortrait(((RRecord)arg).Id))" hideResults="true"></Search>
@if (model != null)
{
    var m = model;
    var link = "/editor/" + originalRecord.Id;
    <NavLink href="@link">Редактировать</NavLink>
    <table border="1">
        <tr>
            <td colspan="@(m.row.Length+1)">@Infobase.GetTerm(m.Tp) @m.Id</td>
        </tr>
        <tr>
            @code{
                List<string> nonEmptyFields = new List<string>();
            }
            @foreach (var row in m.row)
            {
                if ((row is RDirect && ((RDirect)row).DRec != null)
                    || ((row is RField) && ((RField)row).Value != null))
                {
                    nonEmptyFields.Add(row.Prop);
                    <td>@Infobase.GetTerm(row.Prop)</td>
                }

            }

        </tr>
        <tr>
            <PropertyViewer properties="m.row" onBuildPortrait="@(arg => BuildPortrait((string)arg))" nonEmptyFields="@nonEmptyFields"></PropertyViewer>
        </tr>
    </table>
    <br />

    var possibleInvs = ont.Where(rec => rec.Tp == "ObjectProperty" &&
        rec.Props.Any(prop => prop is RLink && prop.Prop == "range" && parentTypes.Contains(((RLink)prop).Resource)))
        .Where(inv => inv.Props.FirstOrDefault(prop => prop.Prop == "range") != null)
        .OrderBy(inv =>
        {
            var val = ((RField)inv.Props.FirstOrDefault(prop => prop.Prop == "priority"))?.Value;
            return val == null ? "zzz" : val;
        });
    //.OrderBy(inv => inv.);

    foreach (var inv in possibleInvs)
    {

        RProperty[] domains = inv.Props.Where(prop => prop.Prop == "domain").ToArray();
        foreach (var domain in domains)
        {
            RProperty[] domFields = ont.FirstOrDefault(rec => rec.Tp == "Class" && rec.Id == ((RLink)domain).Resource)
                .Props.Where(prop => prop is RLink && ((RLink)prop).Resource != inv.Id).ToArray();



            var pTypes = m.inv.Where(propT => propT.Prop == inv.Id);
            if (pTypes.Any())
            {
                <table border="1">
                    <tr>
                        <td colspan="@domFields.Length">
                            <span>@Infobase.GetTerm(inv.Id)</span>
                            <span>@Infobase.GetTerm(((RLink)domain).Resource)</span>
                        </td>
                    </tr>

                    @foreach (var pType in pTypes)
                    {
                        if (pType.lists.Any())
                        {
                            foreach (var list in pType.lists)
                            {
                                if (list.Tp == (((RLink)domain).Resource))
                                {
                                    if (list.list.Length > 0)
                                    {
                                        List<string> nonEmptyFields = new List<string>();
                                        <tr>
                                            @foreach (RLink field in domFields)
                                            {
                                                var nonEmpty = list.list.SelectMany(rec => rec.Props.Where(prop => prop.Prop == field.Resource)
                                                .Where(p => (p is RField && ((RField)p).Value != null) ||
                                               (p is RDirect && ((RDirect)p).DRec != null)));
                                                if (nonEmpty.Count() != 0)
                                                {
                                                    nonEmptyFields.Add(field.Resource);
                                                    <td>@Infobase.GetTerm(field.Resource)</td>
                                                }
                                            }
                                        </tr>
                                        @foreach (RRecord r in list.list)
                                        {

                                            <tr>
                                                <PropertyViewer onBuildPortrait="@(arg => BuildPortrait((string)arg))" properties="@r.Props" forbidden="@inv.Id" nonEmptyFields="@nonEmptyFields"></PropertyViewer>
                                            </tr>


                                        }
                                    }

                                }
                            }
                        }
                    }
                </table>
                <br />
            }

        }
    }

}


@code {
    [Parameter]
    public string entityId { get; set; }

    private string searchsample = "";
    Models.P3Model model = null;
    private RRecord originalRecord;
    private string[] parentTypes;
    private bool lookDb = false;

    private RRecord[] ont = Infobase.ront.rontology;
    private void BuildPortrait(string id)
    {
        searchsample = null;
        RRecord rec = ((REngine)(Infobase.engine)).BuildPortrait(id);
        originalRecord = rec;
        parentTypes = ROntology.parentsDictionary[rec.Tp];
        model = (new Models.P3Model()).Build(rec);
    }

    protected override void OnInitialized() // = On Page Load
    {
        if (entityId != null)
        {
            BuildPortrait(entityId);
        }
    }
}



@if (lookDb)
{
    <hr />
    <!-- Таблица из 4-х столбцов. Запись начинается объединенным столбцом с типом и идентификатором -->
    <table>
        @foreach (var rec in ((REngine)Infobase.engine).Records())
        {
            <tr><td colspan="4" style="background-color:aquamarine;">@(rec.Tp) &nbsp; @(rec.Id)</td></tr>
            @foreach (var p in rec.Props)
            {
                if (p is RField)
                {
                    var f = (RField)p;
                    <tr>
                        <td></td>
                        <td></td>
                        <td>@(f.Prop)</td>
                        <td>@(f.Value)</td>
                    </tr>
                }
                else if (p is RLink)
                {
                    var d = (RLink)p;
                    <tr>
                        <td></td>
                        <td></td>
                        <td>@(d.Prop)</td>
                        <td>@(d.Resource)</td>
                    </tr>
                }
                else if (p is RInverseLink)
                {
                    var il = (RInverseLink)p;
                    <tr>
                        <td>@(il.Source)</td>
                        <td>@(il.Prop)</td>
                        <td></td>
                        <td></td>
                    </tr>
                }
                else
                {
                    <tr>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td>Error in data!</td>
                    </tr>
                }
            }
        }
    </table>
}