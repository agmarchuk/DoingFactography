@using RDFEngine

@foreach (var c in properties)
{
    if (c.Prop == forbidden) { continue; }
    if (c is RField)
    {
        if (c.Prop == "uri")
        {
            <img src="@("docs/GetImage?u=" + ((RField)c).Value +"&s=small")" />
        }
        else
        {
            <td>@(((RField)c).Value)</td>
        }

    }
    else if (c is RDirect && ((RDirect)c).DRec != null)
    {
        var rr = ((RDirect)c).DRec;

        if (rr.Props.FirstOrDefault(p => p.Prop == "documenttype") != null && rr.Props.FirstOrDefault(p => p.Prop == "uri") != null)
        {
            <td>
                <a href="javascript:void(0)" @onclick="@(e => BuildPortrait(rr.Id))">
                    <img src="@("docs/GetImage?u=" + ((RField)rr.Props.FirstOrDefault(p => p.Prop == "uri")).Value +"&s=small")" />
                </a>
            </td>
        }
        else
        {
            <td><a href="javascript:void(0)" @onclick="@(e => BuildPortrait(rr.Id))">@(rr.GetName())</a></td>
        }

    }
    else
    {
        <td>Нет данных</td>
    }

}

@code {
    [Parameter]
    public RProperty[] properties { get; set; }

    [Parameter]
    public string forbidden { get; set; } = null;

    [Parameter]
    public EventCallback onBuildPortrait { get; set; }

    protected async Task BuildPortrait(string id)
    {
        await onBuildPortrait.InvokeAsync(id);
    }
}