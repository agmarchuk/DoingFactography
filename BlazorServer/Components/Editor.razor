@using RDFEngine


@if (addRecord && recToAdd.Id == null)
{
    recToAdd.Props = new RProperty[defrow.Props.Length];
    recToAdd.Tp = new String(defrow.Tp);
    recToAdd.Id = "newrec" + new Random().Next(1000);
    recToAdd.Props = new RProperty[defrow.Props.Length];
    for (int i = 0; i < defrow.Props.Length; i++)
    {
        var c = defrow.Props[i];

        if (c.Prop == forbidden)
       {
            recToAdd.Props[i] = new RDirect();
            recToAdd.Props[i].Prop = c.Prop;
            ((RDirect)recToAdd.Props[i]).DRec = null;
        }
        if (c is RField)
        {
            recToAdd.Props[i] = new RField();
            recToAdd.Props[i].Prop = c.Prop;
            ((RField)recToAdd.Props[i]).Value = "";
        }
        else if (c is RDirect)
        {
            recToAdd.Props[i] = new RDirect();
            recToAdd.Props[i].Prop = c.Prop;
            ((RDirect)recToAdd.Props[i]).DRec = null;
        }
    }


}

@{
    var ind = 0;
}
<table>
    <tbody>
        @foreach (var c in r.Props.Where(x => x.Prop != forbidden))
        {
            <tr>
                <td>@defrow.Props[ind].Prop</td>
                <td>
                    @{
                        RProperty bindProperty;
                        if (addRecord)
                        {
                            bindProperty = recToAdd.Props[ind];
                        }
                        else
                        {
                            bindProperty = c;
                        }
                    }
                    @if (c is RField)
                    {
                        <span><input type="text" @bind-value="@(((RField)bindProperty).Value)" /></span>
                    }
                    else if (c is RDirect && ((RDirect)c).DRec != null)
                    {
                        var rr = ((RDirect)bindProperty).DRec;
                        if (editProp != ((RDirect)bindProperty).Prop)
                        {
                            if (rr != null)
                            {
                                <a href="javascript:void(0)" @onclick="@(e => BuildPortrait(rr.Id))">@rr.GetName()</a>
                            }
                            else
                            {
                                <span>Нет значения</span>
                            }
                            <a href="javascript:void(0)" @onclick="@(e => { editProp = ((RDirect)bindProperty).Prop; })"> ред.</a>
                        }
                        else
                        {
                            string type = null;
                            if (rr != null)
                            {
                                type = rr.Tp;
                            }
                            <span>@rr.GetName()</span>
                            <Search onSearchResultClick="@(arg => { editProp = null; ((RDirect)bindProperty).DRec = (RRecord)arg; })" type="@type"></Search>
                        }
                    }
                    else
                    {
                        <span>???</span>
                    }

                </td>
            </tr>

            ind++;
        }
        <tr>
            <td><button @onclick="@Save">Сохранить</button></td>
            <td><button @onclick="@Cancel">Отмена</button></td>
        </tr>
    </tbody>
</table>

@code {
    [Parameter]
    public RRecord r { get; set; }

    [Parameter]
    public RRecord defrow { get; set; }

    [Parameter]
    public bool addRecord { get; set; } = false;

    [Parameter]
    public string forbidden { get; set; }

    [Parameter]
    public EventCallback onSave { get; set; }

    [Parameter]
    public EventCallback onCancel { get; set; }

    [Parameter]
    public EventCallback onBuildPortrait { get; set; }

    private string editProp = null;

    private RRecord recToAdd = new RRecord();

    protected async Task Save()
    {
        if (addRecord)
        {
            await onSave.InvokeAsync(recToAdd);
        }
        else
        {
            await onSave.InvokeAsync(r);
        }
    }

    protected async Task Cancel()
    {
        editProp = null;
        await onCancel.InvokeAsync();
    }

    protected async Task BuildPortrait(string id)
    {
        await onBuildPortrait.InvokeAsync(id);
    }
}
